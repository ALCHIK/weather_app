{"ast":null,"code":"var _jsxFileName = \"/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js\";\nimport React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport axios from 'axios';\nimport styles from '../App.module.css';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\n\nconst WeatherDisplay = ({\n  zip\n}) => {\n  const initData = {\n    weatherData: {},\n    error: '',\n    isLoading: true\n  };\n  const [weatherData, setWeatherData] = useState(initData.weatherData);\n  const [error, setError] = useState(initData.error);\n  const [isLoading, setIsLoading] = useState(initData.isLoading);\n  const [startDate, setStartDate] = useState(new Date());\n  const URL = \"/api/location/\" + zip + \"/\";\n  useEffect(() => {\n    axios(URL, {\n      method: 'GET'\n    }).then(response => {\n      console.log(response.data);\n      setWeatherData(response.data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(err);\n      setError(err);\n    });\n    /*fetch(URL, {\n        'headers':{\n            'Content-Type':'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Origin': 'https://www.metaweather.com',\n            'Access-Control-Allow-Credentials': true,\n            'Access-Control-Expose-Headers': '*',\n            'Access-Control-Allow-Methods': 'POST, GET, PUT, DELETE, OPTIONS'\n        }}).then(res => res.json()).then(json => {\n        //setWeatherData(json.consolidated_weather);\n        //setIsLoading(false);\n        console.log(JSON.stringify(json))\n      }).catch(err => {\n        setError(err)\n      })*/\n  }, []);\n  useEffect(() => {\n    console.log('update');\n  });\n  useEffect(() => {\n    return () => {\n      console.log('will unmount');\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, \"Displaying some Weather! \", zip), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    gl: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 47\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 66\n    }\n  }, weatherData.title), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n    key: item.id,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://www.metaweather.com/static/img/weather/png/64/\" + item.weather_state_abbr + \".png\",\n    alt: item.weather_state_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Current: \", item.the_temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"High: \", item.max_temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Low: \", item.min_temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Wind Speed: \", item.wind_speed, \" mi/hr\")))), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: startDate,\n    onChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }))));\n  /*return (\n    <div>\n  <h1>Displaying some Weather! {zip}</h1>\n  <div>{ isLoading ? <CircularProgress /> : <div><h1>\n  {weatherData.title}\n  </h1>\n  { weatherData.consolidated_weather.map(item => (\n    <span>\n        <img src={\"https://www.metaweather.com/static/img/weather/png/64/\"+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n        <p>Current: {item.the_temp}°</p>\n    <p>High: {item.max_temp}°</p>\n    <p>Low: {item.min_temp}°</p>\n    <p>Wind Speed: {item.wind_speed} mi/hr</p></span>\n  ))}\n     <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n  </div>\n     }</div>\n  </div>\n  );*/\n};\n\nexport { WeatherDisplay };","map":{"version":3,"sources":["/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js"],"names":["React","useState","useEffect","CircularProgress","DatePicker","axios","styles","Grid","FormLabel","FormControlLabel","RadioGroup","Radio","Paper","WeatherDisplay","zip","initData","weatherData","error","isLoading","setWeatherData","setError","setIsLoading","startDate","setStartDate","Date","URL","method","then","response","console","log","data","catch","err","title","consolidated_weather","map","item","id","weather_state_abbr","weather_state_name","the_temp","max_temp","min_temp","wind_speed","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport axios from 'axios';\nimport  styles from '../App.module.css';\n\n\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst WeatherDisplay = ({zip}) => {\n    const initData = {\n        weatherData:{},\n        error: '',\n        isLoading: true\n    }\n\n    const [weatherData, setWeatherData] = useState(initData.weatherData);\n    const [error, setError] = useState(initData.error);\n    const [isLoading, setIsLoading] = useState(initData.isLoading);\n    const [startDate, setStartDate] = useState(new Date());\n\n    const URL = \"/api/location/\"+zip+\"/\";\n    \n    useEffect(() => {\n        axios(URL, {\n            method: 'GET',\n          }).then(response => {\n              console.log(response.data)\n              setWeatherData(response.data);\n              setIsLoading(false);\n          }).catch((err)=>{\n              console.log(err)\n              setError(err)\n            })\n      \n        /*fetch(URL, {\n            'headers':{\n                'Content-Type':'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Origin': 'https://www.metaweather.com',\n                'Access-Control-Allow-Credentials': true,\n                'Access-Control-Expose-Headers': '*',\n                'Access-Control-Allow-Methods': 'POST, GET, PUT, DELETE, OPTIONS'\n            }}).then(res => res.json()).then(json => {\n            //setWeatherData(json.consolidated_weather);\n            //setIsLoading(false);\n            console.log(JSON.stringify(json))\n          }).catch(err => {\n            setError(err)\n          })*/\n    }, []);\n\n    useEffect(() => { \n        console.log('update')\n    });\n\n    useEffect(() => {\n        return () => {\n          console.log('will unmount');\n        }\n      }, []);\n\n    return (\n        <div>\n    <h1>Displaying some Weather! {zip}</h1>\n    <div>{ isLoading ? <CircularProgress /> : <Grid item gl={12}><h1>\n      {weatherData.title}\n    </h1>\n    <Grid container justify=\"center\" spacing={2}>\n    { weatherData.consolidated_weather.map(item => (\n        <Grid key={item.id} item>\n            <img src={\"https://www.metaweather.com/static/img/weather/png/64/\"+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n            <p>Current: {item.the_temp}°</p>\n            <p>High: {item.max_temp}°</p>\n            <p>Low: {item.min_temp}°</p>\n            <p>Wind Speed: {item.wind_speed} mi/hr</p>\n        </Grid>\n        ))\n    }\n    </Grid>\n    \n    <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n    </Grid>\n    \n    }</div>\n    </div>\n    );\n      /*return (\n        <div>\n    <h1>Displaying some Weather! {zip}</h1>\n    <div>{ isLoading ? <CircularProgress /> : <div><h1>\n      {weatherData.title}\n    </h1>\n    { weatherData.consolidated_weather.map(item => (\n        <span>\n            <img src={\"https://www.metaweather.com/static/img/weather/png/64/\"+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n            <p>Current: {item.the_temp}°</p>\n        <p>High: {item.max_temp}°</p>\n        <p>Low: {item.min_temp}°</p>\n        <p>Wind Speed: {item.wind_speed} mi/hr</p></span>\n    ))}\n    \n    <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n    </div>\n    \n    }</div>\n    </div>\n      );*/\n}\n\nexport  { WeatherDisplay };"]},"metadata":{},"sourceType":"module"}