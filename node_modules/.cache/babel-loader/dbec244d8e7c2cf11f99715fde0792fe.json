{"ast":null,"code":"var _jsxFileName = \"/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js\";\nimport React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\n\nconst WeatherDisplay = ({\n  zip\n}) => {\n  const initData = {\n    weatherData: [],\n    error: '',\n    isLoading: true\n  };\n  const [weatherData, setWeatherData] = useState(initData.weatherData);\n  const [error, setError] = useState(initData.error);\n  const [isLoading, setIsLoading] = useState(initData.isLoading);\n  const [startDate, setStartDate] = useState(new Date());\n  const URL = \"https://www.metaweather.com/api/location/\" + zip + \"/\";\n  useEffect(() => {\n    fetch(URL, {\n      'headers': {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(json => {\n      //setWeatherData(json.consolidated_weather);\n      //setIsLoading(false);\n      console.log(JSON.stringify(json));\n    }).catch(err => {\n      setError(err);\n    });\n  }, []);\n  useEffect(() => {\n    console.log('update');\n  });\n  useEffect(() => {\n    return () => {\n      console.log('will unmount');\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"Displaying some Weather! \", zip), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 47\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 52\n    }\n  }, weatherData.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, \"Current: \", weatherData.main.temp, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, \"High: \", weatherData.main.temp_max, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, \"Low: \", weatherData.main.temp_min, \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, \"Wind Speed: \", weatherData.wind.speed, \" mi/hr\"), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: startDate,\n    onChange: date => setStartDate(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }))));\n};\n\nexport { WeatherDisplay };","map":{"version":3,"sources":["/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js"],"names":["React","useState","useEffect","CircularProgress","DatePicker","WeatherDisplay","zip","initData","weatherData","error","isLoading","setWeatherData","setError","setIsLoading","startDate","setStartDate","Date","URL","fetch","then","res","json","console","log","JSON","stringify","catch","err","name","main","temp","temp_max","temp_min","wind","speed","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\n\nconst WeatherDisplay = ({zip}) => {\n    const initData = {\n        weatherData: [],\n        error: '',\n        isLoading: true\n    }\n\n    const [weatherData, setWeatherData] = useState(initData.weatherData);\n    const [error, setError] = useState(initData.error);\n    const [isLoading, setIsLoading] = useState(initData.isLoading);\n    const [startDate, setStartDate] = useState(new Date());\n\n    const URL = \"https://www.metaweather.com/api/location/\"+zip+\"/\";\n    \n    useEffect(() => {\n        fetch(URL, {\n            'headers':{\n                'Content-Type':'application/json'\n            }}).then(res => res.json()).then(json => {\n            //setWeatherData(json.consolidated_weather);\n            //setIsLoading(false);\n            console.log(JSON.stringify(json))\n          }).catch(err => {\n            setError(err)\n          })\n    }, []);\n\n    useEffect(() => { \n        console.log('update')\n    });\n\n    useEffect(() => {\n        return () => {\n          console.log('will unmount');\n        }\n      }, []);\n\n    return (\n        <div>\n    <h1>Displaying some Weather! {zip}</h1>\n    <div>{ isLoading ? <CircularProgress /> : <div><h1>\n      {weatherData.name}\n    </h1>\n    <p>Current: {weatherData.main.temp}°</p>\n    <p>High: {weatherData.main.temp_max}°</p>\n    <p>Low: {weatherData.main.temp_min}°</p>\n    <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n    <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n    </div>\n    \n    }</div>\n    </div>\n      );\n}\n\nexport  { WeatherDisplay };"]},"metadata":{},"sourceType":"module"}