{"ast":null,"code":"var _jsxFileName = \"/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js\";\nimport React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PropTypes from 'prop-types';\nimport { getWeatherListService, getHistoryListService, getImageService } from '../service/service';\n\nconst WeatherDisplay = ({\n  zip\n}) => {\n  const initData = {\n    weatherData: {},\n    error: '',\n    isLoading: true,\n    hasHistory: false\n  };\n  const [weatherData, setWeatherData] = useState(initData.weatherData);\n  const [error, setError] = useState(initData.error);\n  const [isLoading, setIsLoading] = useState(initData.isLoading);\n  const [startDate, setStartDate] = useState(new Date());\n  const [hasHistory, setHistory] = useState(initData.hasHistory);\n\n  const getWeatherList = zip => {\n    getWeatherListService(zip).then(response => {\n      setWeatherData(response.data);\n      setIsLoading(false);\n    }).catch(err => {\n      setError(err);\n    });\n  };\n\n  const getHistoryList = (zip, date) => {\n    getHistoryListService(zip, date).then(response => {\n      setWeatherData({\n        consolidated_weather: response.data\n      });\n      setIsLoading(false);\n      setHistory(true);\n    }).catch(err => {\n      setError(err);\n    });\n  };\n\n  const onClickDateHandler = date => {\n    setStartDate(date);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const new_date = year + '/' + month + '/' + day + '/';\n    setIsLoading(true);\n    getHistoryList(zip, new_date);\n  };\n\n  useEffect(() => {\n    getWeatherList(zip);\n  }, []);\n  useEffect(() => {\n    console.log('update');\n  });\n  useEffect(() => {\n    return () => {\n      console.log('will unmount');\n    };\n  }, []);\n\n  const ViewWeather = () => {\n    return !hasHistory ? /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"row\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n      key: item.id,\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 28\n      }\n    }, item.applicable_date), /*#__PURE__*/React.createElement(\"img\", {\n      src: getImageService(item.weather_state_abbr),\n      alt: item.weather_state_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 28\n      }\n    }, \"Max: \", item.max_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 28\n      }\n    }, \"Min: \", item.min_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 28\n      }\n    }, \"Wind Speed: \", item.wind_speed.toFixed(), \" mi/hr\")))) : /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n      key: item.id,\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: getImageService(item.weather_state_abbr),\n      alt: item.weather_state_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }\n    }, item.max_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 28\n      }\n    }, item.min_temp.toFixed(), \"\\xB0\"))));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Show weather!\", hasHistory ? /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"home page\",\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(HomeIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  })) : ''), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 26\n    }\n  }) : !isLoading && error ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 43\n    }\n  }, error) : /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 29\n    }\n  }, weatherData.title ? weatherData.title : 'History', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 84\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: startDate,\n    onChange: date => onClickDateHandler(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(ViewWeather, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }))));\n};\n\nWeatherDisplay.propTypes = {\n  zip: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport { WeatherDisplay };","map":{"version":3,"sources":["/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js"],"names":["React","useState","useEffect","CircularProgress","DatePicker","Grid","IconButton","HomeIcon","PropTypes","getWeatherListService","getHistoryListService","getImageService","WeatherDisplay","zip","initData","weatherData","error","isLoading","hasHistory","setWeatherData","setError","setIsLoading","startDate","setStartDate","Date","setHistory","getWeatherList","then","response","data","catch","err","getHistoryList","date","consolidated_weather","onClickDateHandler","year","getFullYear","month","getMonth","day","getDate","new_date","console","log","ViewWeather","map","item","id","applicable_date","weather_state_abbr","weather_state_name","max_temp","toFixed","min_temp","wind_speed","window","location","reload","title","propTypes","oneOfType","string","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PropTypes from 'prop-types';\n\nimport {\n  getWeatherListService,\n  getHistoryListService,\n  getImageService,\n} from '../service/service';\n\nconst WeatherDisplay = ({ zip }) => {\n  const initData = {\n    weatherData: {},\n    error: '',\n    isLoading: true,\n    hasHistory: false,\n  };\n\n  const [weatherData, setWeatherData] = useState(initData.weatherData);\n  const [error, setError] = useState(initData.error);\n  const [isLoading, setIsLoading] = useState(initData.isLoading);\n  const [startDate, setStartDate] = useState(new Date());\n  const [hasHistory, setHistory] = useState(initData.hasHistory);\n\n  const getWeatherList = zip => {\n    getWeatherListService(zip)\n      .then(response => {\n        setWeatherData(response.data);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setError(err);\n      });\n  };\n\n  const getHistoryList = (zip, date) => {\n    getHistoryListService(zip, date)\n      .then(response => {\n        setWeatherData({ consolidated_weather: response.data });\n        setIsLoading(false);\n        setHistory(true);\n      })\n      .catch(err => {\n        setError(err);\n      });\n  };\n\n  const onClickDateHandler = date => {\n    setStartDate(date);\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const new_date = year + '/' + month + '/' + day + '/';\n\n    setIsLoading(true);\n    getHistoryList(zip, new_date);\n  };\n\n  useEffect(() => {\n    getWeatherList(zip);\n  }, []);\n\n  useEffect(() => {\n    console.log('update');\n  });\n\n  useEffect(() => {\n    return () => {\n      console.log('will unmount');\n    };\n  }, []);\n\n  const ViewWeather = () => {\n    return !hasHistory ? \n      <Grid container justify=\"center\" direction=\"row\" spacing={2}>\n                    { weatherData.consolidated_weather.map(item => (\n                       <Grid key={item.id} item>\n                           <p>{ item.applicable_date }</p>\n                           <img src={getImageService(item.weather_state_abbr)} alt={item.weather_state_name} />\n                           <p>Max: {item.max_temp.toFixed()}°</p>\n                           <p>Min: {item.min_temp.toFixed()}°</p>\n                           <p>Wind Speed: {item.wind_speed.toFixed()} mi/hr</p>\n                       </Grid>\n                       ))}\n                </Grid> :\n                <Grid container direction=\"row\">\n                   { weatherData.consolidated_weather.map(item =>\n                       <Grid key={item.id} item>\n                           <img src={getImageService(item.weather_state_abbr)} alt={item.weather_state_name} />\n                           <p>{item.max_temp.toFixed()}°</p>\n                           <p>{item.min_temp.toFixed()}°</p>\n                       </Grid>\n   \n                   )}\n               </Grid>\n    };\n\n  return (\n    <div>\n      <h1>\n        Show weather!\n        {hasHistory ? (\n          <IconButton\n            aria-label=\"home page\"\n            onClick={() => window.location.reload()}>\n            <HomeIcon />\n          </IconButton>\n        ) : ''}\n      </h1>\n      <div>{isLoading ? (<CircularProgress />) : \n                    !isLoading && error ? <span>{error}</span> : \n                        <Grid item lg={12}>\n                            <h1>{weatherData.title ? weatherData.title : 'History'}<br/>\n                                <DatePicker selected={startDate} onChange={date => onClickDateHandler(date)} />\n                            </h1>\n                            <ViewWeather />\n                        </Grid>}\n            </div>\n        </div>\n    );\n}\n\nWeatherDisplay.propTypes = {\n  zip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport { WeatherDisplay };\n"]},"metadata":{},"sourceType":"module"}