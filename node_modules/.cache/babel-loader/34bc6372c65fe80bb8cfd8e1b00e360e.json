{"ast":null,"code":"var _jsxFileName = \"/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js\";\nimport React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PropTypes from 'prop-types';\nimport styles from '../App.module.css';\nimport { getWeatherListService } from '../service/service';\n\nconst WeatherDisplay = ({\n  zip\n}) => {\n  const initData = {\n    weatherData: {},\n    error: '',\n    isLoading: true,\n    hasHistory: false\n  };\n  const [weatherData, setWeatherData] = useState(initData.weatherData);\n  const [error, setError] = useState(initData.error);\n  const [isLoading, setIsLoading] = useState(initData.isLoading);\n  const [startDate, setStartDate] = useState(new Date());\n  const [hasHistory, setHistory] = useState(initData.hasHistory);\n  const URL = \"/api/location/\" + zip + \"/\";\n  const imageURL = \"https://www.metaweather.com/static/img/weather/png/64/\";\n\n  const getWeatherList = zip => {\n    getWeatherListService(zip).then(response => {\n      setWeatherData(response.data);\n      setIsLoading(false);\n    }).catch(err => {\n      setError(err);\n    });\n  };\n\n  const getHistoryList = () => {};\n\n  const onClickDateHandler = date => {\n    setStartDate(date);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    axios(URL + year + \"/\" + month + \"/\" + day + \"/\", {\n      method: 'GET'\n    }).then(response => {\n      setWeatherData({\n        consolidated_weather: response.data\n      });\n      setIsLoading(false);\n      setHistory(true);\n    }).catch(err => {\n      setError(err);\n    });\n  };\n\n  useEffect(() => {\n    getWeatherList(zip);\n    /*axios(URL, {\n        method: 'GET',\n      }).then(response => {\n          setWeatherData(response.data);\n          setIsLoading(false);\n      }).catch( ( err ) => {\n          setError(err);\n        });*/\n  }, []);\n  useEffect(() => {\n    console.log('update');\n  });\n  useEffect(() => {\n    return () => {\n      console.log('will unmount');\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Show weather!  \", hasHistory ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 47\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"home page\",\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HomeIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }))) : ''), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 32\n    }\n  }) : !isLoading && error ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 43\n    }\n  }, error) : /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }, weatherData.title ? weatherData.title : 'History', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 84\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: startDate,\n    onChange: date => onClickDateHandler(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  })), !hasHistory ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }\n  }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n    key: item.id,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 41\n    }\n  }, item.applicable_date), /*#__PURE__*/React.createElement(\"img\", {\n    src: imageURL + item.weather_state_abbr + \".png\",\n    alt: item.weather_state_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 41\n    }\n  }, \"Max: \", item.max_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 41\n    }\n  }, \"Min: \", item.min_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 41\n    }\n  }, \"Wind Speed: \", item.wind_speed.toFixed(), \" mi/hr\")))) : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n    key: item.id,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: imageURL + item.weather_state_abbr + \".png\",\n    alt: item.weather_state_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 41\n    }\n  }, item.max_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 41\n    }\n  }, item.min_temp.toFixed(), \"\\xB0\")))))));\n};\n\nWeatherDisplay.propTypes = {\n  zip: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport { WeatherDisplay };","map":{"version":3,"sources":["/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js"],"names":["React","useState","useEffect","CircularProgress","DatePicker","axios","Grid","IconButton","HomeIcon","PropTypes","styles","getWeatherListService","WeatherDisplay","zip","initData","weatherData","error","isLoading","hasHistory","setWeatherData","setError","setIsLoading","startDate","setStartDate","Date","setHistory","URL","imageURL","getWeatherList","then","response","data","catch","err","getHistoryList","onClickDateHandler","date","year","getFullYear","month","getMonth","day","getDate","method","consolidated_weather","console","log","window","location","reload","title","map","item","id","applicable_date","weather_state_abbr","weather_state_name","max_temp","toFixed","min_temp","wind_speed","propTypes","oneOfType","string","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PropTypes from 'prop-types';\n\nimport  styles from '../App.module.css';\nimport { getWeatherListService } from '../service/service';\n\nconst WeatherDisplay = ({zip}) => {\n    const initData = {\n        weatherData:{},\n        error: '',\n        isLoading: true,\n        hasHistory: false,\n    };\n\n    const [weatherData, setWeatherData] = useState(initData.weatherData);\n    const [error, setError] = useState(initData.error);\n    const [isLoading, setIsLoading] = useState(initData.isLoading);\n    const [startDate, setStartDate] = useState(new Date());\n    const [hasHistory, setHistory] = useState(initData.hasHistory);\n\n    const URL = \"/api/location/\"+zip+\"/\";\n    const imageURL = \"https://www.metaweather.com/static/img/weather/png/64/\";\n\n    const getWeatherList = (zip) => {\n        getWeatherListService(zip).then(response => {\n            setWeatherData(response.data);\n            setIsLoading(false);\n        }).catch( ( err ) => {\n            setError(err);\n          });\n    }\n\n    const getHistoryList = () => {\n\n    };\n\n    const onClickDateHandler = (date) => {\n        setStartDate(date);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n\n        axios(URL+year+\"/\"+month+\"/\"+day+\"/\", {\n            method: 'GET',\n          }).then(response => {\n              setWeatherData({ consolidated_weather: response.data });\n              setIsLoading(false);\n              setHistory(true);\n          }).catch( ( err ) => {\n              setError(err);\n            });\n\n    };\n\n    useEffect( () => {\n        getWeatherList(zip);\n        /*axios(URL, {\n            method: 'GET',\n          }).then(response => {\n              setWeatherData(response.data);\n              setIsLoading(false);\n          }).catch( ( err ) => {\n              setError(err);\n            });*/\n    }, []);\n\n    useEffect(() => { \n        console.log('update');\n    });\n\n    useEffect( () => {\n        return () => {\n          console.log('will unmount');\n        };\n      }, []);\n\n    return (\n        <div>\n            <h1>Show weather!  { hasHistory ? <span>\n                    <IconButton \n                    aria-label=\"home page\" \n                    onClick={()=> window.location.reload()}>\n                        <HomeIcon />\n                    </IconButton>\n                    </span>: ''}</h1>\n            <div>{ isLoading ? <CircularProgress /> : \n                    !isLoading && error ? <span>{error}</span> : \n                        <Grid item lg={12}>\n                            <h1>{weatherData.title ? weatherData.title : 'History'}<br/>\n                                <DatePicker selected={startDate} onChange={date => onClickDateHandler(date)} />\n                            </h1>\n                            { !hasHistory ?\n                             <Grid container justify=\"center\" direction=\"row\" spacing={2}>\n                                 { weatherData.consolidated_weather.map(item => (\n                                    <Grid key={item.id} item>\n                                        <p>{item.applicable_date }</p>\n                                        <img src={imageURL+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n                                        <p>Max: {item.max_temp.toFixed()}°</p>\n                                        <p>Min: {item.min_temp.toFixed()}°</p>\n                                        <p>Wind Speed: {item.wind_speed.toFixed()} mi/hr</p>\n                                    </Grid>\n                                    ))}\n                            </Grid> : \n                            <Grid container direction=\"row\">\n                                { weatherData.consolidated_weather.map(item =>\n                                    <Grid key={item.id} item>\n                                        <img src={imageURL+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n                                        <p>{item.max_temp.toFixed()}°</p>\n                                        <p>{item.min_temp.toFixed()}°</p>\n                                    </Grid>\n                \n                                )}\n                            </Grid>}\n                        </Grid>}\n            </div>\n        </div>\n    );\n}\n\nWeatherDisplay.propTypes = {\n\n    zip: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n      ])\n};\n\nexport  { WeatherDisplay };"]},"metadata":{},"sourceType":"module"}