{"ast":null,"code":"var _jsxFileName = \"/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js\";\nimport React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PropTypes from 'prop-types';\nimport styles from '../App.module.css';\n\nconst WeatherDisplay = ({\n  zip\n}) => {\n  const initData = {\n    weatherData: {},\n    error: '',\n    isLoading: true,\n    hasHistory: false\n  };\n  const [weatherData, setWeatherData] = useState(initData.weatherData);\n  const [error, setError] = useState(initData.error);\n  const [isLoading, setIsLoading] = useState(initData.isLoading);\n  const [startDate, setStartDate] = useState(new Date());\n  const [hasHistory, setHistory] = useState(initData.hasHistory);\n  const URL = \"/api/location/\" + zip + \"/\";\n\n  const onClickDateHandler = date => {\n    setStartDate(date);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    axios(URL + year + \"/\" + month + \"/\" + day + \"/\", {\n      method: 'GET'\n    }).then(response => {\n      setWeatherData({\n        consolidated_weather: response.data\n      });\n      setIsLoading(false);\n      setHistory(true);\n    }).catch(err => {\n      console.log(err);\n      setError(err);\n    });\n  };\n\n  useEffect(() => {\n    axios(URL, {\n      method: 'GET'\n    }).then(response => {\n      console.log(response.data);\n      setWeatherData(response.data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(err);\n      setError(err);\n    });\n  }, []);\n  useEffect(() => {\n    console.log('update');\n  });\n  useEffect(() => {\n    return () => {\n      console.log('will unmount');\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, \"Show weather!  \", hasHistory ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 39\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"delete\",\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HomeIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }))) : ''), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 24\n    }\n  }) : !isLoading && error ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 69\n    }\n  }, error) : /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 93\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 112\n    }\n  }, weatherData.title ? weatherData.title : 'History', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 58\n    }\n  }), /*#__PURE__*/React.createElement(DatePicker, {\n    selected: startDate,\n    onChange: date => onClickDateHandler(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  })), !hasHistory ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n    key: item.id,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, item.applicable_date), /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://www.metaweather.com/static/img/weather/png/64/\" + item.weather_state_abbr + \".png\",\n    alt: item.weather_state_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"High: \", item.max_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Low: \", item.min_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Wind Speed: \", item.wind_speed.toFixed(), \" mi/hr\")))) : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, weatherData.consolidated_weather.map(item => /*#__PURE__*/React.createElement(Grid, {\n    key: item.id,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://www.metaweather.com/static/img/weather/png/64/\" + item.weather_state_abbr + \".png\",\n    alt: item.weather_state_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, item.max_temp.toFixed(), \"\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, item.min_temp.toFixed(), \"\\xB0\")))))));\n};\n\nWeatherDisplay.propTypes = {\n  zip: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport { WeatherDisplay };","map":{"version":3,"sources":["/Users/alinachudaeva/WebHeroTestProject/weather_app/src/WeatherDisplay/WeatherDisplay.js"],"names":["React","useState","useEffect","CircularProgress","DatePicker","axios","Grid","Paper","IconButton","HomeIcon","PropTypes","styles","WeatherDisplay","zip","initData","weatherData","error","isLoading","hasHistory","setWeatherData","setError","setIsLoading","startDate","setStartDate","Date","setHistory","URL","onClickDateHandler","date","year","getFullYear","month","getMonth","day","getDate","method","then","response","consolidated_weather","data","catch","err","console","log","window","location","reload","title","map","item","id","applicable_date","weather_state_abbr","weather_state_name","max_temp","toFixed","min_temp","wind_speed","propTypes","oneOfType","string","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\nimport PropTypes from 'prop-types';\n\nimport  styles from '../App.module.css';\n\nconst WeatherDisplay = ({zip}) => {\n    const initData = {\n        weatherData:{},\n        error: '',\n        isLoading: true,\n        hasHistory: false,\n    };\n\n    const [weatherData, setWeatherData] = useState(initData.weatherData);\n    const [error, setError] = useState(initData.error);\n    const [isLoading, setIsLoading] = useState(initData.isLoading);\n    const [startDate, setStartDate] = useState(new Date());\n    const [hasHistory, setHistory] = useState(initData.hasHistory);\n\n    const URL = \"/api/location/\"+zip+\"/\";\n\n    const onClickDateHandler = (date) => {\n        setStartDate(date);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n\n        axios(URL+year+\"/\"+month+\"/\"+day+\"/\", {\n            method: 'GET',\n          }).then(response => {\n              setWeatherData({consolidated_weather: response.data});\n              setIsLoading(false);\n              setHistory(true);\n          }).catch((err)=>{\n              console.log(err);\n              setError(err);\n            });\n        \n    }\n\n    useEffect(() => {\n        axios(URL, {\n            method: 'GET',\n          }).then(response => {\n              console.log(response.data)\n              setWeatherData(response.data);\n              setIsLoading(false);\n          }).catch((err)=>{\n              console.log(err)\n              setError(err)\n            });\n    }, []);\n\n    useEffect(() => { \n        console.log('update')\n    });\n\n    useEffect(() => {\n        return () => {\n          console.log('will unmount');\n        }\n      }, []);\n\n    return (\n        <div>\n    <h1>Show weather!  { hasHistory ? <span>\n                    <IconButton \n                    aria-label=\"delete\"\n                    onClick={()=> window.location.reload()}\n                    >\n                            <HomeIcon />\n                    </IconButton>\n                </span>: ''}</h1>\n    <div>{ isLoading ? <CircularProgress /> : !isLoading && error ? <span>{error}</span> :  <Grid item lg={12}><h1>\n      {weatherData.title ? weatherData.title : 'History'}<br/>\n      <DatePicker selected={startDate} onChange={date => onClickDateHandler(date)} />\n    </h1>\n    { !hasHistory ? <Grid container justify=\"center\" direction=\"row\" spacing={2}>\n    { weatherData.consolidated_weather.map(item => (\n        <Grid key={item.id} item>\n            <p>{item.applicable_date }</p>\n            <img src={\"https://www.metaweather.com/static/img/weather/png/64/\"+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n            <p>High: {item.max_temp.toFixed()}°</p>\n            <p>Low: {item.min_temp.toFixed()}°</p>\n            <p>Wind Speed: {item.wind_speed.toFixed()} mi/hr</p>\n        </Grid>\n        ))\n    }\n    </Grid> : <Grid container direction=\"row\">\n    { weatherData.consolidated_weather.map(item =>\n    <Grid key={item.id} item>\n                    <img src={\"https://www.metaweather.com/static/img/weather/png/64/\"+item.weather_state_abbr+\".png\"} alt={item.weather_state_name} />\n            <p>{item.max_temp.toFixed()}°</p>\n            <p>{item.min_temp.toFixed()}°</p>\n                    \n                \n                </Grid>\n                \n                )}\n                </Grid>}\n    </Grid>\n    \n    }</div>\n    </div>\n    );\n}\n\nWeatherDisplay.propTypes = {\n\n    zip: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n      ])\n};\n\nexport  { WeatherDisplay };"]},"metadata":{},"sourceType":"module"}